/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Produtividade API
 * API de produtividade para gest√£o de produtividade dos funcion√°rios dentro do armaz√©m e gest√£o de carregamento
 * OpenAPI spec version: 1.0
 */
import {
  z as zod
} from 'zod';


/**
 * @summary Retorna informa√ß√µes do usu√°rio logado
 */
export const minhaInfoResponse = zod.object({
  "listCenterRole": zod.array(zod.object({
  "centerId": zod.string(),
  "role": zod.enum(['USER', 'FUNCIONARIO', 'ADMIN']),
  "processo": zod.string()
}))
})

/**
 * @summary Cria um novo funcion√°rio
 */
export const criarFuncionarioAdmBody = zod.object({
  "centerId": zod.string(),
  "id": zod.string(),
  "nome": zod.string(),
  "primeiroNome": zod.string(),
  "ultimoNome": zod.string(),
  "credencial": zod.string(),
  "turno": zod.string()
})

export const criarFuncionarioAdmResponse = zod.object({
  "centerId": zod.string(),
  "id": zod.string(),
  "nome": zod.string(),
  "turno": zod.string(),
  "role": zod.string()
})

/**
 * @summary Cria um novo funcion√°rio
 */
export const criarNovoFuncionarioBody = zod.object({
  "centerId": zod.string(),
  "id": zod.string(),
  "nome": zod.string(),
  "turno": zod.string(),
  "role": zod.string()
})

export const criarNovoFuncionarioResponse = zod.object({
  "centerId": zod.string(),
  "id": zod.string(),
  "nome": zod.string(),
  "turno": zod.string(),
  "role": zod.string()
})

/**
 * @summary Cria funcion√°rios em massa
 */
export const criarFuncionariosEmMassaBody = zod.object({
  "centerId": zod.string(),
  "users": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string(),
  "turno": zod.string()
}))
})

/**
 * @summary Atribuir funcionario ao centro
 */
export const atribuirCentroAFuncionarioBody = zod.object({
  "centerId": zod.string(),
  "userId": zod.string(),
  "role": zod.enum(['FUNCIONARIO', 'USER', 'ADMIN', 'MASTER'])
})

/**
 * @summary Remover funcionario do centro
 */
export const removerFuncionarioDoCentroParams = zod.object({
  "userId": zod.string(),
  "centerId": zod.string()
})

/**
 * @summary Lista funcionarios por centro
 */
export const listarFuncionariosPorCentroParams = zod.object({
  "centerId": zod.string()
})

export const listarFuncionariosPorCentroResponseItem = zod.object({
  "id": zod.string(),
  "name": zod.string(),
  "centerId": zod.string(),
  "turno": zod.enum(['MANHA', 'TARDE', 'NOITE']),
  "role": zod.enum(['USER', 'FUNCIONARIO', 'ADMIN'])
})
export const listarFuncionariosPorCentroResponse = zod.array(listarFuncionariosPorCentroResponseItem)

/**
 * @summary Lista funcionarios por centro
 */
export const listarFuncionariosAdmPorCentroParams = zod.object({
  "centerId": zod.string()
})

export const listarFuncionariosAdmPorCentroResponseItem = zod.object({
  "id": zod.string(),
  "name": zod.string(),
  "centerId": zod.string(),
  "turno": zod.enum(['MANHA', 'TARDE', 'NOITE']),
  "role": zod.enum(['USER', 'FUNCIONARIO', 'ADMIN'])
})
export const listarFuncionariosAdmPorCentroResponse = zod.array(listarFuncionariosAdmPorCentroResponseItem)

/**
 * @summary Deleta um usuario
 */
export const deletarUsuarioParams = zod.object({
  "userId": zod.string(),
  "centerId": zod.string()
})

/**
 * @summary Reseta a senha de um usuario
 */
export const resetSenhaParams = zod.object({
  "userId": zod.string()
})

export const resetSenhaBody = zod.string()

