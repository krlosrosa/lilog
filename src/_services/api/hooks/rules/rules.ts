/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Produtividade API
 * API de produtividade para gest√£o de produtividade dos funcion√°rios dentro do armaz√©m e gest√£o de carregamento
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateRuleDto,
  ListRolesEngineOutput
} from '../../model';

import { axiosFetcher } from '../../../http/axios.http';
import type { ErrorType , BodyType } from '../../../http/axios.http';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Cria uma nova regra
 */
export const createRule = (
    createRuleDto: BodyType<CreateRuleDto>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/rules/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createRuleDto, signal
    },
      options);
    }
  


export const getCreateRuleMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRule>>, TError,{data: BodyType<CreateRuleDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof createRule>>, TError,{data: BodyType<CreateRuleDto>}, TContext> => {

const mutationKey = ['createRule'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createRule>>, {data: BodyType<CreateRuleDto>}> = (props) => {
          const {data} = props ?? {};

          return  createRule(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateRuleMutationResult = NonNullable<Awaited<ReturnType<typeof createRule>>>
    export type CreateRuleMutationBody = BodyType<CreateRuleDto>
    export type CreateRuleMutationError = ErrorType<null>

    /**
 * @summary Cria uma nova regra
 */
export const useCreateRule = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRule>>, TError,{data: BodyType<CreateRuleDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createRule>>,
        TError,
        {data: BodyType<CreateRuleDto>},
        TContext
      > => {

      const mutationOptions = getCreateRuleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Valida uma regra
 */
export const validateRule = (
    centerId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<string>(
      {url: `/rules/validate/${centerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getValidateRuleQueryKey = (centerId?: string,) => {
    return [`/rules/validate/${centerId}`] as const;
    }

    
export const getValidateRuleQueryOptions = <TData = Awaited<ReturnType<typeof validateRule>>, TError = ErrorType<null>>(centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof validateRule>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValidateRuleQueryKey(centerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof validateRule>>> = ({ signal }) => validateRule(centerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(centerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof validateRule>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ValidateRuleQueryResult = NonNullable<Awaited<ReturnType<typeof validateRule>>>
export type ValidateRuleQueryError = ErrorType<null>


export function useValidateRule<TData = Awaited<ReturnType<typeof validateRule>>, TError = ErrorType<null>>(
 centerId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof validateRule>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof validateRule>>,
          TError,
          Awaited<ReturnType<typeof validateRule>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useValidateRule<TData = Awaited<ReturnType<typeof validateRule>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof validateRule>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof validateRule>>,
          TError,
          Awaited<ReturnType<typeof validateRule>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useValidateRule<TData = Awaited<ReturnType<typeof validateRule>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof validateRule>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Valida uma regra
 */

export function useValidateRule<TData = Awaited<ReturnType<typeof validateRule>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof validateRule>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getValidateRuleQueryOptions(centerId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary listar Regras do centro
 */
export const listarRulesPorCentro = (
    centerId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<ListRolesEngineOutput>(
      {url: `/rules/listar-rules/${centerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getListarRulesPorCentroQueryKey = (centerId?: string,) => {
    return [`/rules/listar-rules/${centerId}`] as const;
    }

    
export const getListarRulesPorCentroQueryOptions = <TData = Awaited<ReturnType<typeof listarRulesPorCentro>>, TError = ErrorType<null>>(centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarRulesPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListarRulesPorCentroQueryKey(centerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listarRulesPorCentro>>> = ({ signal }) => listarRulesPorCentro(centerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(centerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listarRulesPorCentro>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListarRulesPorCentroQueryResult = NonNullable<Awaited<ReturnType<typeof listarRulesPorCentro>>>
export type ListarRulesPorCentroQueryError = ErrorType<null>


export function useListarRulesPorCentro<TData = Awaited<ReturnType<typeof listarRulesPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarRulesPorCentro>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarRulesPorCentro>>,
          TError,
          Awaited<ReturnType<typeof listarRulesPorCentro>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarRulesPorCentro<TData = Awaited<ReturnType<typeof listarRulesPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarRulesPorCentro>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarRulesPorCentro>>,
          TError,
          Awaited<ReturnType<typeof listarRulesPorCentro>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarRulesPorCentro<TData = Awaited<ReturnType<typeof listarRulesPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarRulesPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary listar Regras do centro
 */

export function useListarRulesPorCentro<TData = Awaited<ReturnType<typeof listarRulesPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarRulesPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListarRulesPorCentroQueryOptions(centerId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



