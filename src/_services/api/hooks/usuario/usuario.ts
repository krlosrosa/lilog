/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Produtividade API
 * API de produtividade para gest√£o de produtividade dos funcion√°rios dentro do armaz√©m e gest√£o de carregamento
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AtribuirCentroAFuncionarioZodDto,
  CriarFuncionarioAdmZodDto,
  CriarFuncionariosEmMassaZodDto,
  CriarNovoFuncionarioZodDto,
  CriarNovoFuncionarioZodDtoOutput,
  ListarFuncionariosPorCentroZodDtoOutput,
  ResponseInfoMeZodDtoOutput
} from '../../model';

import { axiosFetcher } from '../../../http/axios.http';
import type { ErrorType , BodyType } from '../../../http/axios.http';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Retorna informa√ß√µes do usu√°rio logado
 */
export const minhaInfo = (
    
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<ResponseInfoMeZodDtoOutput>(
      {url: `/api/usuario/minha-info`, method: 'GET', signal
    },
      options);
    }
  

export const getMinhaInfoQueryKey = () => {
    return [`/api/usuario/minha-info`] as const;
    }

    
export const getMinhaInfoQueryOptions = <TData = Awaited<ReturnType<typeof minhaInfo>>, TError = ErrorType<null>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof minhaInfo>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMinhaInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof minhaInfo>>> = ({ signal }) => minhaInfo(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof minhaInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MinhaInfoQueryResult = NonNullable<Awaited<ReturnType<typeof minhaInfo>>>
export type MinhaInfoQueryError = ErrorType<null>


export function useMinhaInfo<TData = Awaited<ReturnType<typeof minhaInfo>>, TError = ErrorType<null>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof minhaInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof minhaInfo>>,
          TError,
          Awaited<ReturnType<typeof minhaInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMinhaInfo<TData = Awaited<ReturnType<typeof minhaInfo>>, TError = ErrorType<null>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof minhaInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof minhaInfo>>,
          TError,
          Awaited<ReturnType<typeof minhaInfo>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMinhaInfo<TData = Awaited<ReturnType<typeof minhaInfo>>, TError = ErrorType<null>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof minhaInfo>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retorna informa√ß√µes do usu√°rio logado
 */

export function useMinhaInfo<TData = Awaited<ReturnType<typeof minhaInfo>>, TError = ErrorType<null>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof minhaInfo>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMinhaInfoQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Cria um novo funcion√°rio
 */
export const criarFuncionarioAdm = (
    criarFuncionarioAdmZodDto: BodyType<CriarFuncionarioAdmZodDto>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<CriarNovoFuncionarioZodDtoOutput>(
      {url: `/api/usuario/criar-funcionario-adm`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: criarFuncionarioAdmZodDto, signal
    },
      options);
    }
  


export const getCriarFuncionarioAdmMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarFuncionarioAdm>>, TError,{data: BodyType<CriarFuncionarioAdmZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof criarFuncionarioAdm>>, TError,{data: BodyType<CriarFuncionarioAdmZodDto>}, TContext> => {

const mutationKey = ['criarFuncionarioAdm'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof criarFuncionarioAdm>>, {data: BodyType<CriarFuncionarioAdmZodDto>}> = (props) => {
          const {data} = props ?? {};

          return  criarFuncionarioAdm(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CriarFuncionarioAdmMutationResult = NonNullable<Awaited<ReturnType<typeof criarFuncionarioAdm>>>
    export type CriarFuncionarioAdmMutationBody = BodyType<CriarFuncionarioAdmZodDto>
    export type CriarFuncionarioAdmMutationError = ErrorType<null>

    /**
 * @summary Cria um novo funcion√°rio
 */
export const useCriarFuncionarioAdm = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarFuncionarioAdm>>, TError,{data: BodyType<CriarFuncionarioAdmZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof criarFuncionarioAdm>>,
        TError,
        {data: BodyType<CriarFuncionarioAdmZodDto>},
        TContext
      > => {

      const mutationOptions = getCriarFuncionarioAdmMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Cria um novo funcion√°rio
 */
export const criarNovoFuncionario = (
    criarNovoFuncionarioZodDto: BodyType<CriarNovoFuncionarioZodDto>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<CriarNovoFuncionarioZodDtoOutput>(
      {url: `/api/usuario/criar-novo-funcionario`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: criarNovoFuncionarioZodDto, signal
    },
      options);
    }
  


export const getCriarNovoFuncionarioMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarNovoFuncionario>>, TError,{data: BodyType<CriarNovoFuncionarioZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof criarNovoFuncionario>>, TError,{data: BodyType<CriarNovoFuncionarioZodDto>}, TContext> => {

const mutationKey = ['criarNovoFuncionario'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof criarNovoFuncionario>>, {data: BodyType<CriarNovoFuncionarioZodDto>}> = (props) => {
          const {data} = props ?? {};

          return  criarNovoFuncionario(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CriarNovoFuncionarioMutationResult = NonNullable<Awaited<ReturnType<typeof criarNovoFuncionario>>>
    export type CriarNovoFuncionarioMutationBody = BodyType<CriarNovoFuncionarioZodDto>
    export type CriarNovoFuncionarioMutationError = ErrorType<null>

    /**
 * @summary Cria um novo funcion√°rio
 */
export const useCriarNovoFuncionario = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarNovoFuncionario>>, TError,{data: BodyType<CriarNovoFuncionarioZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof criarNovoFuncionario>>,
        TError,
        {data: BodyType<CriarNovoFuncionarioZodDto>},
        TContext
      > => {

      const mutationOptions = getCriarNovoFuncionarioMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Cria funcion√°rios em massa
 */
export const criarFuncionariosEmMassa = (
    criarFuncionariosEmMassaZodDto: BodyType<CriarFuncionariosEmMassaZodDto>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/usuario/criar-funcionarios-em-massa`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: criarFuncionariosEmMassaZodDto, signal
    },
      options);
    }
  


export const getCriarFuncionariosEmMassaMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarFuncionariosEmMassa>>, TError,{data: BodyType<CriarFuncionariosEmMassaZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof criarFuncionariosEmMassa>>, TError,{data: BodyType<CriarFuncionariosEmMassaZodDto>}, TContext> => {

const mutationKey = ['criarFuncionariosEmMassa'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof criarFuncionariosEmMassa>>, {data: BodyType<CriarFuncionariosEmMassaZodDto>}> = (props) => {
          const {data} = props ?? {};

          return  criarFuncionariosEmMassa(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CriarFuncionariosEmMassaMutationResult = NonNullable<Awaited<ReturnType<typeof criarFuncionariosEmMassa>>>
    export type CriarFuncionariosEmMassaMutationBody = BodyType<CriarFuncionariosEmMassaZodDto>
    export type CriarFuncionariosEmMassaMutationError = ErrorType<unknown>

    /**
 * @summary Cria funcion√°rios em massa
 */
export const useCriarFuncionariosEmMassa = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarFuncionariosEmMassa>>, TError,{data: BodyType<CriarFuncionariosEmMassaZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof criarFuncionariosEmMassa>>,
        TError,
        {data: BodyType<CriarFuncionariosEmMassaZodDto>},
        TContext
      > => {

      const mutationOptions = getCriarFuncionariosEmMassaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Atribuir funcionario ao centro
 */
export const atribuirCentroAFuncionario = (
    atribuirCentroAFuncionarioZodDto: BodyType<AtribuirCentroAFuncionarioZodDto>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/usuario/atribuir-funcionario-ao-centro`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: atribuirCentroAFuncionarioZodDto, signal
    },
      options);
    }
  


export const getAtribuirCentroAFuncionarioMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof atribuirCentroAFuncionario>>, TError,{data: BodyType<AtribuirCentroAFuncionarioZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof atribuirCentroAFuncionario>>, TError,{data: BodyType<AtribuirCentroAFuncionarioZodDto>}, TContext> => {

const mutationKey = ['atribuirCentroAFuncionario'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof atribuirCentroAFuncionario>>, {data: BodyType<AtribuirCentroAFuncionarioZodDto>}> = (props) => {
          const {data} = props ?? {};

          return  atribuirCentroAFuncionario(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AtribuirCentroAFuncionarioMutationResult = NonNullable<Awaited<ReturnType<typeof atribuirCentroAFuncionario>>>
    export type AtribuirCentroAFuncionarioMutationBody = BodyType<AtribuirCentroAFuncionarioZodDto>
    export type AtribuirCentroAFuncionarioMutationError = ErrorType<null>

    /**
 * @summary Atribuir funcionario ao centro
 */
export const useAtribuirCentroAFuncionario = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof atribuirCentroAFuncionario>>, TError,{data: BodyType<AtribuirCentroAFuncionarioZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof atribuirCentroAFuncionario>>,
        TError,
        {data: BodyType<AtribuirCentroAFuncionarioZodDto>},
        TContext
      > => {

      const mutationOptions = getAtribuirCentroAFuncionarioMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Remover funcionario do centro
 */
export const removerFuncionarioDoCentro = (
    userId: string,
    centerId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/usuario/remover-funcionario-do-centro/${userId}/${centerId}`, method: 'POST', signal
    },
      options);
    }
  


export const getRemoverFuncionarioDoCentroMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removerFuncionarioDoCentro>>, TError,{userId: string;centerId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof removerFuncionarioDoCentro>>, TError,{userId: string;centerId: string}, TContext> => {

const mutationKey = ['removerFuncionarioDoCentro'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removerFuncionarioDoCentro>>, {userId: string;centerId: string}> = (props) => {
          const {userId,centerId} = props ?? {};

          return  removerFuncionarioDoCentro(userId,centerId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoverFuncionarioDoCentroMutationResult = NonNullable<Awaited<ReturnType<typeof removerFuncionarioDoCentro>>>
    
    export type RemoverFuncionarioDoCentroMutationError = ErrorType<null>

    /**
 * @summary Remover funcionario do centro
 */
export const useRemoverFuncionarioDoCentro = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removerFuncionarioDoCentro>>, TError,{userId: string;centerId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof removerFuncionarioDoCentro>>,
        TError,
        {userId: string;centerId: string},
        TContext
      > => {

      const mutationOptions = getRemoverFuncionarioDoCentroMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Lista funcionarios por centro
 */
export const listarFuncionariosPorCentro = (
    centerId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<ListarFuncionariosPorCentroZodDtoOutput>(
      {url: `/api/usuario/listar-funcionarios-por-centro/${centerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getListarFuncionariosPorCentroQueryKey = (centerId?: string,) => {
    return [`/api/usuario/listar-funcionarios-por-centro/${centerId}`] as const;
    }

    
export const getListarFuncionariosPorCentroQueryOptions = <TData = Awaited<ReturnType<typeof listarFuncionariosPorCentro>>, TError = ErrorType<null>>(centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarFuncionariosPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListarFuncionariosPorCentroQueryKey(centerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listarFuncionariosPorCentro>>> = ({ signal }) => listarFuncionariosPorCentro(centerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(centerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listarFuncionariosPorCentro>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListarFuncionariosPorCentroQueryResult = NonNullable<Awaited<ReturnType<typeof listarFuncionariosPorCentro>>>
export type ListarFuncionariosPorCentroQueryError = ErrorType<null>


export function useListarFuncionariosPorCentro<TData = Awaited<ReturnType<typeof listarFuncionariosPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarFuncionariosPorCentro>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarFuncionariosPorCentro>>,
          TError,
          Awaited<ReturnType<typeof listarFuncionariosPorCentro>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarFuncionariosPorCentro<TData = Awaited<ReturnType<typeof listarFuncionariosPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarFuncionariosPorCentro>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarFuncionariosPorCentro>>,
          TError,
          Awaited<ReturnType<typeof listarFuncionariosPorCentro>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarFuncionariosPorCentro<TData = Awaited<ReturnType<typeof listarFuncionariosPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarFuncionariosPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Lista funcionarios por centro
 */

export function useListarFuncionariosPorCentro<TData = Awaited<ReturnType<typeof listarFuncionariosPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarFuncionariosPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListarFuncionariosPorCentroQueryOptions(centerId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Lista funcionarios por centro
 */
export const listarFuncionariosAdmPorCentro = (
    centerId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<ListarFuncionariosPorCentroZodDtoOutput>(
      {url: `/api/usuario/listar-funcionarios-adm-por-centro/${centerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getListarFuncionariosAdmPorCentroQueryKey = (centerId?: string,) => {
    return [`/api/usuario/listar-funcionarios-adm-por-centro/${centerId}`] as const;
    }

    
export const getListarFuncionariosAdmPorCentroQueryOptions = <TData = Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>, TError = ErrorType<null>>(centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListarFuncionariosAdmPorCentroQueryKey(centerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>> = ({ signal }) => listarFuncionariosAdmPorCentro(centerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(centerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListarFuncionariosAdmPorCentroQueryResult = NonNullable<Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>>
export type ListarFuncionariosAdmPorCentroQueryError = ErrorType<null>


export function useListarFuncionariosAdmPorCentro<TData = Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>,
          TError,
          Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarFuncionariosAdmPorCentro<TData = Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>,
          TError,
          Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarFuncionariosAdmPorCentro<TData = Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Lista funcionarios por centro
 */

export function useListarFuncionariosAdmPorCentro<TData = Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarFuncionariosAdmPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListarFuncionariosAdmPorCentroQueryOptions(centerId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Deleta um usuario
 */
export const deletarUsuario = (
    userId: string,
    centerId: string,
 options?: SecondParameter<typeof axiosFetcher>,) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/usuario/deletar-usuario/${userId}/${centerId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletarUsuarioMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarUsuario>>, TError,{userId: string;centerId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deletarUsuario>>, TError,{userId: string;centerId: string}, TContext> => {

const mutationKey = ['deletarUsuario'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletarUsuario>>, {userId: string;centerId: string}> = (props) => {
          const {userId,centerId} = props ?? {};

          return  deletarUsuario(userId,centerId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletarUsuarioMutationResult = NonNullable<Awaited<ReturnType<typeof deletarUsuario>>>
    
    export type DeletarUsuarioMutationError = ErrorType<null>

    /**
 * @summary Deleta um usuario
 */
export const useDeletarUsuario = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarUsuario>>, TError,{userId: string;centerId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletarUsuario>>,
        TError,
        {userId: string;centerId: string},
        TContext
      > => {

      const mutationOptions = getDeletarUsuarioMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Reseta a senha de um usuario
 */
export const resetSenha = (
    userId: BodyType<string>,
    resetSenhaBody: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/usuario/reset-senha/${userId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resetSenhaBody, signal
    },
      options);
    }
  


export const getResetSenhaMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetSenha>>, TError,{userId: string;data: BodyType<string>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof resetSenha>>, TError,{userId: string;data: BodyType<string>}, TContext> => {

const mutationKey = ['resetSenha'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetSenha>>, {userId: string;data: BodyType<string>}> = (props) => {
          const {userId,data} = props ?? {};

          return  resetSenha(userId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResetSenhaMutationResult = NonNullable<Awaited<ReturnType<typeof resetSenha>>>
    export type ResetSenhaMutationBody = BodyType<string>
    export type ResetSenhaMutationError = ErrorType<null>

    /**
 * @summary Reseta a senha de um usuario
 */
export const useResetSenha = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetSenha>>, TError,{userId: string;data: BodyType<string>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof resetSenha>>,
        TError,
        {userId: string;data: BodyType<string>},
        TContext
      > => {

      const mutationOptions = getResetSenhaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    