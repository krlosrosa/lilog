/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Produtividade API
 * API de produtividade para gest√£o de produtividade dos funcion√°rios dentro do armaz√©m e gest√£o de carregamento
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CriarNovoCentroZodDto,
  CriarNovoCentroZodDtoOutput,
  DefinirConfiguracaoImpressaoDto,
  EditarCentroDto
} from '../../model';

import { axiosFetcher } from '../../../http/axios.http';
import type { ErrorType , BodyType } from '../../../http/axios.http';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Cria um novo centro
 */
export const criarNovoCentro = (
    criarNovoCentroZodDto: BodyType<CriarNovoCentroZodDto>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<CriarNovoCentroZodDtoOutput>(
      {url: `/api/centro/criar-novo-centro`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: criarNovoCentroZodDto, signal
    },
      options);
    }
  


export const getCriarNovoCentroMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarNovoCentro>>, TError,{data: BodyType<CriarNovoCentroZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof criarNovoCentro>>, TError,{data: BodyType<CriarNovoCentroZodDto>}, TContext> => {

const mutationKey = ['criarNovoCentro'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof criarNovoCentro>>, {data: BodyType<CriarNovoCentroZodDto>}> = (props) => {
          const {data} = props ?? {};

          return  criarNovoCentro(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CriarNovoCentroMutationResult = NonNullable<Awaited<ReturnType<typeof criarNovoCentro>>>
    export type CriarNovoCentroMutationBody = BodyType<CriarNovoCentroZodDto>
    export type CriarNovoCentroMutationError = ErrorType<null>

    /**
 * @summary Cria um novo centro
 */
export const useCriarNovoCentro = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof criarNovoCentro>>, TError,{data: BodyType<CriarNovoCentroZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof criarNovoCentro>>,
        TError,
        {data: BodyType<CriarNovoCentroZodDto>},
        TContext
      > => {

      const mutationOptions = getCriarNovoCentroMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Deleta um centro
 */
export const deletarCentro = (
    centerId: string,
 options?: SecondParameter<typeof axiosFetcher>,) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/centro/deletar-centro/${centerId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletarCentroMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarCentro>>, TError,{centerId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deletarCentro>>, TError,{centerId: string}, TContext> => {

const mutationKey = ['deletarCentro'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletarCentro>>, {centerId: string}> = (props) => {
          const {centerId} = props ?? {};

          return  deletarCentro(centerId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletarCentroMutationResult = NonNullable<Awaited<ReturnType<typeof deletarCentro>>>
    
    export type DeletarCentroMutationError = ErrorType<null>

    /**
 * @summary Deleta um centro
 */
export const useDeletarCentro = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarCentro>>, TError,{centerId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletarCentro>>,
        TError,
        {centerId: string},
        TContext
      > => {

      const mutationOptions = getDeletarCentroMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Edita um centro
 */
export const editarCentro = (
    centerId: string,
    editarCentroDto: BodyType<EditarCentroDto>,
 options?: SecondParameter<typeof axiosFetcher>,) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/centro/editar-centro/${centerId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: editarCentroDto
    },
      options);
    }
  


export const getEditarCentroMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editarCentro>>, TError,{centerId: string;data: BodyType<EditarCentroDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof editarCentro>>, TError,{centerId: string;data: BodyType<EditarCentroDto>}, TContext> => {

const mutationKey = ['editarCentro'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editarCentro>>, {centerId: string;data: BodyType<EditarCentroDto>}> = (props) => {
          const {centerId,data} = props ?? {};

          return  editarCentro(centerId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditarCentroMutationResult = NonNullable<Awaited<ReturnType<typeof editarCentro>>>
    export type EditarCentroMutationBody = BodyType<EditarCentroDto>
    export type EditarCentroMutationError = ErrorType<null>

    /**
 * @summary Edita um centro
 */
export const useEditarCentro = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editarCentro>>, TError,{centerId: string;data: BodyType<EditarCentroDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof editarCentro>>,
        TError,
        {centerId: string;data: BodyType<EditarCentroDto>},
        TContext
      > => {

      const mutationOptions = getEditarCentroMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Define a configura√ß√£o de impress√£o
 */
export const definirConfiguracaoImpressao = (
    centerId: string,
    definirConfiguracaoImpressaoDto: BodyType<DefinirConfiguracaoImpressaoDto>,
 options?: SecondParameter<typeof axiosFetcher>,) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/centro/definir-configuracao-impressao/${centerId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: definirConfiguracaoImpressaoDto
    },
      options);
    }
  


export const getDefinirConfiguracaoImpressaoMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof definirConfiguracaoImpressao>>, TError,{centerId: string;data: BodyType<DefinirConfiguracaoImpressaoDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof definirConfiguracaoImpressao>>, TError,{centerId: string;data: BodyType<DefinirConfiguracaoImpressaoDto>}, TContext> => {

const mutationKey = ['definirConfiguracaoImpressao'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof definirConfiguracaoImpressao>>, {centerId: string;data: BodyType<DefinirConfiguracaoImpressaoDto>}> = (props) => {
          const {centerId,data} = props ?? {};

          return  definirConfiguracaoImpressao(centerId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DefinirConfiguracaoImpressaoMutationResult = NonNullable<Awaited<ReturnType<typeof definirConfiguracaoImpressao>>>
    export type DefinirConfiguracaoImpressaoMutationBody = BodyType<DefinirConfiguracaoImpressaoDto>
    export type DefinirConfiguracaoImpressaoMutationError = ErrorType<null>

    /**
 * @summary Define a configura√ß√£o de impress√£o
 */
export const useDefinirConfiguracaoImpressao = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof definirConfiguracaoImpressao>>, TError,{centerId: string;data: BodyType<DefinirConfiguracaoImpressaoDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof definirConfiguracaoImpressao>>,
        TError,
        {centerId: string;data: BodyType<DefinirConfiguracaoImpressaoDto>},
        TContext
      > => {

      const mutationOptions = getDefinirConfiguracaoImpressaoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Busca as configura√ß√µes de impress√£o
 */
export const buscarConfiguracoesImpressao = (
    centerId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<DefinirConfiguracaoImpressaoDto>(
      {url: `/api/centro/buscar-configuracoes-impressao/${centerId}`, method: 'GET', signal
    },
      options);
    }
  

export const getBuscarConfiguracoesImpressaoQueryKey = (centerId?: string,) => {
    return [`/api/centro/buscar-configuracoes-impressao/${centerId}`] as const;
    }

    
export const getBuscarConfiguracoesImpressaoQueryOptions = <TData = Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>, TError = ErrorType<null>>(centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBuscarConfiguracoesImpressaoQueryKey(centerId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>> = ({ signal }) => buscarConfiguracoesImpressao(centerId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(centerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BuscarConfiguracoesImpressaoQueryResult = NonNullable<Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>>
export type BuscarConfiguracoesImpressaoQueryError = ErrorType<null>


export function useBuscarConfiguracoesImpressao<TData = Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>, TError = ErrorType<null>>(
 centerId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>,
          TError,
          Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarConfiguracoesImpressao<TData = Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>,
          TError,
          Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarConfiguracoesImpressao<TData = Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Busca as configura√ß√µes de impress√£o
 */

export function useBuscarConfiguracoesImpressao<TData = Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>, TError = ErrorType<null>>(
 centerId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarConfiguracoesImpressao>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBuscarConfiguracoesImpressaoQueryOptions(centerId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Busca todos os centros
 */
export const buscarTodosOsCentros = (
    
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<CriarNovoCentroZodDtoOutput[]>(
      {url: `/api/centro/buscar-todos-os-centros`, method: 'GET', signal
    },
      options);
    }
  

export const getBuscarTodosOsCentrosQueryKey = () => {
    return [`/api/centro/buscar-todos-os-centros`] as const;
    }

    
export const getBuscarTodosOsCentrosQueryOptions = <TData = Awaited<ReturnType<typeof buscarTodosOsCentros>>, TError = ErrorType<null>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTodosOsCentros>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getBuscarTodosOsCentrosQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof buscarTodosOsCentros>>> = ({ signal }) => buscarTodosOsCentros(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof buscarTodosOsCentros>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type BuscarTodosOsCentrosQueryResult = NonNullable<Awaited<ReturnType<typeof buscarTodosOsCentros>>>
export type BuscarTodosOsCentrosQueryError = ErrorType<null>


export function useBuscarTodosOsCentros<TData = Awaited<ReturnType<typeof buscarTodosOsCentros>>, TError = ErrorType<null>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTodosOsCentros>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarTodosOsCentros>>,
          TError,
          Awaited<ReturnType<typeof buscarTodosOsCentros>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarTodosOsCentros<TData = Awaited<ReturnType<typeof buscarTodosOsCentros>>, TError = ErrorType<null>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTodosOsCentros>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof buscarTodosOsCentros>>,
          TError,
          Awaited<ReturnType<typeof buscarTodosOsCentros>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useBuscarTodosOsCentros<TData = Awaited<ReturnType<typeof buscarTodosOsCentros>>, TError = ErrorType<null>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTodosOsCentros>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Busca todos os centros
 */

export function useBuscarTodosOsCentros<TData = Awaited<ReturnType<typeof buscarTodosOsCentros>>, TError = ErrorType<null>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof buscarTodosOsCentros>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getBuscarTodosOsCentrosQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



