/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Produtividade API
 * API de produtividade para gest√£o de produtividade dos funcion√°rios dentro do armaz√©m e gest√£o de carregamento
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AddPausaIndividualDto,
  AddPauseGeralDto,
  CreateProdutividadeDto,
  DemandasNaoIniciadasZodDtoOutput,
  FinalizarPauseGeralDto,
  FinalizarProdutividadeDto,
  ProdutividadeControllerBuscarProdutividadeParams
} from '../../model';

import { axiosFetcher } from '../../../http/axios.http';
import type { ErrorType , BodyType } from '../../../http/axios.http';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Iniciar demanda de produtividade
 */
export const iniciarDemandaProdutividade = (
    centerId: string,
    createProdutividadeDto: BodyType<CreateProdutividadeDto>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/produtividade/iniciar-demanda/${centerId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProdutividadeDto, signal
    },
      options);
    }
  


export const getIniciarDemandaProdutividadeMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof iniciarDemandaProdutividade>>, TError,{centerId: string;data: BodyType<CreateProdutividadeDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof iniciarDemandaProdutividade>>, TError,{centerId: string;data: BodyType<CreateProdutividadeDto>}, TContext> => {

const mutationKey = ['iniciarDemandaProdutividade'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof iniciarDemandaProdutividade>>, {centerId: string;data: BodyType<CreateProdutividadeDto>}> = (props) => {
          const {centerId,data} = props ?? {};

          return  iniciarDemandaProdutividade(centerId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type IniciarDemandaProdutividadeMutationResult = NonNullable<Awaited<ReturnType<typeof iniciarDemandaProdutividade>>>
    export type IniciarDemandaProdutividadeMutationBody = BodyType<CreateProdutividadeDto>
    export type IniciarDemandaProdutividadeMutationError = ErrorType<null>

    /**
 * @summary Iniciar demanda de produtividade
 */
export const useIniciarDemandaProdutividade = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof iniciarDemandaProdutividade>>, TError,{centerId: string;data: BodyType<CreateProdutividadeDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof iniciarDemandaProdutividade>>,
        TError,
        {centerId: string;data: BodyType<CreateProdutividadeDto>},
        TContext
      > => {

      const mutationOptions = getIniciarDemandaProdutividadeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Finaliza um picking
 */
export const produtividadeControllerFinalizarPicking = (
    palletId: string,
    finalizarProdutividadeDto: BodyType<FinalizarProdutividadeDto>,
 options?: SecondParameter<typeof axiosFetcher>,) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/produtividade/finalizar-demanda/${palletId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: finalizarProdutividadeDto
    },
      options);
    }
  


export const getProdutividadeControllerFinalizarPickingMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerFinalizarPicking>>, TError,{palletId: string;data: BodyType<FinalizarProdutividadeDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerFinalizarPicking>>, TError,{palletId: string;data: BodyType<FinalizarProdutividadeDto>}, TContext> => {

const mutationKey = ['produtividadeControllerFinalizarPicking'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof produtividadeControllerFinalizarPicking>>, {palletId: string;data: BodyType<FinalizarProdutividadeDto>}> = (props) => {
          const {palletId,data} = props ?? {};

          return  produtividadeControllerFinalizarPicking(palletId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProdutividadeControllerFinalizarPickingMutationResult = NonNullable<Awaited<ReturnType<typeof produtividadeControllerFinalizarPicking>>>
    export type ProdutividadeControllerFinalizarPickingMutationBody = BodyType<FinalizarProdutividadeDto>
    export type ProdutividadeControllerFinalizarPickingMutationError = ErrorType<null>

    /**
 * @summary Finaliza um picking
 */
export const useProdutividadeControllerFinalizarPicking = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerFinalizarPicking>>, TError,{palletId: string;data: BodyType<FinalizarProdutividadeDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof produtividadeControllerFinalizarPicking>>,
        TError,
        {palletId: string;data: BodyType<FinalizarProdutividadeDto>},
        TContext
      > => {

      const mutationOptions = getProdutividadeControllerFinalizarPickingMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Adiciona uma pausa individual
 */
export const produtividadeControllerAddPausaIndividual = (
    addPausaIndividualDto: BodyType<AddPausaIndividualDto>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/produtividade/adicionar-pausa-individual`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addPausaIndividualDto, signal
    },
      options);
    }
  


export const getProdutividadeControllerAddPausaIndividualMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerAddPausaIndividual>>, TError,{data: BodyType<AddPausaIndividualDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerAddPausaIndividual>>, TError,{data: BodyType<AddPausaIndividualDto>}, TContext> => {

const mutationKey = ['produtividadeControllerAddPausaIndividual'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof produtividadeControllerAddPausaIndividual>>, {data: BodyType<AddPausaIndividualDto>}> = (props) => {
          const {data} = props ?? {};

          return  produtividadeControllerAddPausaIndividual(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProdutividadeControllerAddPausaIndividualMutationResult = NonNullable<Awaited<ReturnType<typeof produtividadeControllerAddPausaIndividual>>>
    export type ProdutividadeControllerAddPausaIndividualMutationBody = BodyType<AddPausaIndividualDto>
    export type ProdutividadeControllerAddPausaIndividualMutationError = ErrorType<null>

    /**
 * @summary Adiciona uma pausa individual
 */
export const useProdutividadeControllerAddPausaIndividual = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerAddPausaIndividual>>, TError,{data: BodyType<AddPausaIndividualDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof produtividadeControllerAddPausaIndividual>>,
        TError,
        {data: BodyType<AddPausaIndividualDto>},
        TContext
      > => {

      const mutationOptions = getProdutividadeControllerAddPausaIndividualMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Finaliza uma pausa individual
 */
export const produtividadeControllerFinalizarPausaIndividual = (
    palletId: string,
 options?: SecondParameter<typeof axiosFetcher>,) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/produtividade/finalizar-pausa-individual/${palletId}`, method: 'PUT'
    },
      options);
    }
  


export const getProdutividadeControllerFinalizarPausaIndividualMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerFinalizarPausaIndividual>>, TError,{palletId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerFinalizarPausaIndividual>>, TError,{palletId: string}, TContext> => {

const mutationKey = ['produtividadeControllerFinalizarPausaIndividual'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof produtividadeControllerFinalizarPausaIndividual>>, {palletId: string}> = (props) => {
          const {palletId} = props ?? {};

          return  produtividadeControllerFinalizarPausaIndividual(palletId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProdutividadeControllerFinalizarPausaIndividualMutationResult = NonNullable<Awaited<ReturnType<typeof produtividadeControllerFinalizarPausaIndividual>>>
    
    export type ProdutividadeControllerFinalizarPausaIndividualMutationError = ErrorType<null>

    /**
 * @summary Finaliza uma pausa individual
 */
export const useProdutividadeControllerFinalizarPausaIndividual = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerFinalizarPausaIndividual>>, TError,{palletId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof produtividadeControllerFinalizarPausaIndividual>>,
        TError,
        {palletId: string},
        TContext
      > => {

      const mutationOptions = getProdutividadeControllerFinalizarPausaIndividualMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Deleta uma demanda
 */
export const deletarDemanda = (
    palletId: string,
 options?: SecondParameter<typeof axiosFetcher>,) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/produtividade/deletar-demanda/${palletId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeletarDemandaMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarDemanda>>, TError,{palletId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof deletarDemanda>>, TError,{palletId: string}, TContext> => {

const mutationKey = ['deletarDemanda'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletarDemanda>>, {palletId: string}> = (props) => {
          const {palletId} = props ?? {};

          return  deletarDemanda(palletId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletarDemandaMutationResult = NonNullable<Awaited<ReturnType<typeof deletarDemanda>>>
    
    export type DeletarDemandaMutationError = ErrorType<null>

    /**
 * @summary Deleta uma demanda
 */
export const useDeletarDemanda = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletarDemanda>>, TError,{palletId: string}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deletarDemanda>>,
        TError,
        {palletId: string},
        TContext
      > => {

      const mutationOptions = getDeletarDemandaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Adiciona uma pausa geral
 */
export const produtividadeControllerAddPausaGeral = (
    addPauseGeralDto: BodyType<AddPauseGeralDto>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/produtividade/adicionar-pausa-geral`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addPauseGeralDto, signal
    },
      options);
    }
  


export const getProdutividadeControllerAddPausaGeralMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerAddPausaGeral>>, TError,{data: BodyType<AddPauseGeralDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerAddPausaGeral>>, TError,{data: BodyType<AddPauseGeralDto>}, TContext> => {

const mutationKey = ['produtividadeControllerAddPausaGeral'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof produtividadeControllerAddPausaGeral>>, {data: BodyType<AddPauseGeralDto>}> = (props) => {
          const {data} = props ?? {};

          return  produtividadeControllerAddPausaGeral(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProdutividadeControllerAddPausaGeralMutationResult = NonNullable<Awaited<ReturnType<typeof produtividadeControllerAddPausaGeral>>>
    export type ProdutividadeControllerAddPausaGeralMutationBody = BodyType<AddPauseGeralDto>
    export type ProdutividadeControllerAddPausaGeralMutationError = ErrorType<null>

    /**
 * @summary Adiciona uma pausa geral
 */
export const useProdutividadeControllerAddPausaGeral = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerAddPausaGeral>>, TError,{data: BodyType<AddPauseGeralDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof produtividadeControllerAddPausaGeral>>,
        TError,
        {data: BodyType<AddPauseGeralDto>},
        TContext
      > => {

      const mutationOptions = getProdutividadeControllerAddPausaGeralMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Finaliza uma pausa geral
 */
export const produtividadeControllerFinalizarPausaGeral = (
    finalizarPauseGeralDto: BodyType<FinalizarPauseGeralDto>,
 options?: SecondParameter<typeof axiosFetcher>,) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/produtividade/finalizar-pausa-geral`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: finalizarPauseGeralDto
    },
      options);
    }
  


export const getProdutividadeControllerFinalizarPausaGeralMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerFinalizarPausaGeral>>, TError,{data: BodyType<FinalizarPauseGeralDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerFinalizarPausaGeral>>, TError,{data: BodyType<FinalizarPauseGeralDto>}, TContext> => {

const mutationKey = ['produtividadeControllerFinalizarPausaGeral'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof produtividadeControllerFinalizarPausaGeral>>, {data: BodyType<FinalizarPauseGeralDto>}> = (props) => {
          const {data} = props ?? {};

          return  produtividadeControllerFinalizarPausaGeral(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProdutividadeControllerFinalizarPausaGeralMutationResult = NonNullable<Awaited<ReturnType<typeof produtividadeControllerFinalizarPausaGeral>>>
    export type ProdutividadeControllerFinalizarPausaGeralMutationBody = BodyType<FinalizarPauseGeralDto>
    export type ProdutividadeControllerFinalizarPausaGeralMutationError = ErrorType<null>

    /**
 * @summary Finaliza uma pausa geral
 */
export const useProdutividadeControllerFinalizarPausaGeral = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof produtividadeControllerFinalizarPausaGeral>>, TError,{data: BodyType<FinalizarPauseGeralDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof produtividadeControllerFinalizarPausaGeral>>,
        TError,
        {data: BodyType<FinalizarPauseGeralDto>},
        TContext
      > => {

      const mutationOptions = getProdutividadeControllerFinalizarPausaGeralMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Busca produtividade
 */
export const produtividadeControllerBuscarProdutividade = (
    centerId: string,
    params: ProdutividadeControllerBuscarProdutividadeParams,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/produtividade/buscar-produtividade/${centerId}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getProdutividadeControllerBuscarProdutividadeQueryKey = (centerId?: string,
    params?: ProdutividadeControllerBuscarProdutividadeParams,) => {
    return [`/api/produtividade/buscar-produtividade/${centerId}`, ...(params ? [params]: [])] as const;
    }

    
export const getProdutividadeControllerBuscarProdutividadeQueryOptions = <TData = Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>, TError = ErrorType<null>>(centerId: string,
    params: ProdutividadeControllerBuscarProdutividadeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProdutividadeControllerBuscarProdutividadeQueryKey(centerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>> = ({ signal }) => produtividadeControllerBuscarProdutividade(centerId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(centerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ProdutividadeControllerBuscarProdutividadeQueryResult = NonNullable<Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>>
export type ProdutividadeControllerBuscarProdutividadeQueryError = ErrorType<null>


export function useProdutividadeControllerBuscarProdutividade<TData = Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>, TError = ErrorType<null>>(
 centerId: string,
    params: ProdutividadeControllerBuscarProdutividadeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>,
          TError,
          Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProdutividadeControllerBuscarProdutividade<TData = Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>, TError = ErrorType<null>>(
 centerId: string,
    params: ProdutividadeControllerBuscarProdutividadeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>,
          TError,
          Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useProdutividadeControllerBuscarProdutividade<TData = Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>, TError = ErrorType<null>>(
 centerId: string,
    params: ProdutividadeControllerBuscarProdutividadeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Busca produtividade
 */

export function useProdutividadeControllerBuscarProdutividade<TData = Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>, TError = ErrorType<null>>(
 centerId: string,
    params: ProdutividadeControllerBuscarProdutividadeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof produtividadeControllerBuscarProdutividade>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getProdutividadeControllerBuscarProdutividadeQueryOptions(centerId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ListarPaletesEmAberto
 */
export const listarPaletesEmAberto = (
    centerId: string,
    data: string,
    processo: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<DemandasNaoIniciadasZodDtoOutput>(
      {url: `/api/produtividade/nao-finalizadas/${centerId}/${data}/${processo}`, method: 'GET', signal
    },
      options);
    }
  

export const getListarPaletesEmAbertoQueryKey = (centerId?: string,
    data?: string,
    processo?: string,) => {
    return [`/api/produtividade/nao-finalizadas/${centerId}/${data}/${processo}`] as const;
    }

    
export const getListarPaletesEmAbertoQueryOptions = <TData = Awaited<ReturnType<typeof listarPaletesEmAberto>>, TError = ErrorType<null>>(centerId: string,
    data: string,
    processo: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarPaletesEmAberto>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListarPaletesEmAbertoQueryKey(centerId,data,processo);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listarPaletesEmAberto>>> = ({ signal }) => listarPaletesEmAberto(centerId,data,processo, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(centerId && data && processo), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listarPaletesEmAberto>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListarPaletesEmAbertoQueryResult = NonNullable<Awaited<ReturnType<typeof listarPaletesEmAberto>>>
export type ListarPaletesEmAbertoQueryError = ErrorType<null>


export function useListarPaletesEmAberto<TData = Awaited<ReturnType<typeof listarPaletesEmAberto>>, TError = ErrorType<null>>(
 centerId: string,
    data: string,
    processo: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarPaletesEmAberto>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarPaletesEmAberto>>,
          TError,
          Awaited<ReturnType<typeof listarPaletesEmAberto>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarPaletesEmAberto<TData = Awaited<ReturnType<typeof listarPaletesEmAberto>>, TError = ErrorType<null>>(
 centerId: string,
    data: string,
    processo: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarPaletesEmAberto>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listarPaletesEmAberto>>,
          TError,
          Awaited<ReturnType<typeof listarPaletesEmAberto>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListarPaletesEmAberto<TData = Awaited<ReturnType<typeof listarPaletesEmAberto>>, TError = ErrorType<null>>(
 centerId: string,
    data: string,
    processo: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarPaletesEmAberto>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ListarPaletesEmAberto
 */

export function useListarPaletesEmAberto<TData = Awaited<ReturnType<typeof listarPaletesEmAberto>>, TError = ErrorType<null>>(
 centerId: string,
    data: string,
    processo: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listarPaletesEmAberto>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListarPaletesEmAbertoQueryOptions(centerId,data,processo,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



