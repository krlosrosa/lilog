/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Produtividade API
 * API de produtividade para gest√£o de produtividade dos funcion√°rios dentro do armaz√©m e gest√£o de carregamento
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DashCentrosParams,
  DashCentrosZodDto
} from '../../model';

import { axiosFetcher } from '../../../http/axios.http';
import type { ErrorType } from '../../../http/axios.http';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Dashboard de centros
 */
export const dashCentros = (
    params: DashCentrosParams,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<DashCentrosZodDto>(
      {url: `/dashboard/dash-centros`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getDashCentrosQueryKey = (params?: DashCentrosParams,) => {
    return [`/dashboard/dash-centros`, ...(params ? [params]: [])] as const;
    }

    
export const getDashCentrosQueryOptions = <TData = Awaited<ReturnType<typeof dashCentros>>, TError = ErrorType<null>>(params: DashCentrosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentros>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDashCentrosQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dashCentros>>> = ({ signal }) => dashCentros(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dashCentros>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DashCentrosQueryResult = NonNullable<Awaited<ReturnType<typeof dashCentros>>>
export type DashCentrosQueryError = ErrorType<null>


export function useDashCentros<TData = Awaited<ReturnType<typeof dashCentros>>, TError = ErrorType<null>>(
 params: DashCentrosParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentros>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashCentros>>,
          TError,
          Awaited<ReturnType<typeof dashCentros>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashCentros<TData = Awaited<ReturnType<typeof dashCentros>>, TError = ErrorType<null>>(
 params: DashCentrosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentros>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashCentros>>,
          TError,
          Awaited<ReturnType<typeof dashCentros>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashCentros<TData = Awaited<ReturnType<typeof dashCentros>>, TError = ErrorType<null>>(
 params: DashCentrosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentros>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Dashboard de centros
 */

export function useDashCentros<TData = Awaited<ReturnType<typeof dashCentros>>, TError = ErrorType<null>>(
 params: DashCentrosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentros>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDashCentrosQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



