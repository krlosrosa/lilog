/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Produtividade API
 * API de produtividade para gest√£o de produtividade dos funcion√°rios dentro do armaz√©m e gest√£o de carregamento
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AnomaliaPorCentroZodDto,
  AnomaliasPorCentroParams,
  DashBoardDiaPorCentrodtoZodDtoOutput,
  DashCentroIndividualParams,
  DashCentrosParams,
  DashCentrosZodDto,
  DashUmCentrosZodDto
} from '../../model';

import { axiosFetcher } from '../../../http/axios.http';
import type { ErrorType } from '../../../http/axios.http';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Dashboard de centros
 */
export const dashCentros = (
    params: DashCentrosParams,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<DashCentrosZodDto>(
      {url: `/dashboard/dash-centros`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getDashCentrosQueryKey = (params?: DashCentrosParams,) => {
    return [`/dashboard/dash-centros`, ...(params ? [params]: [])] as const;
    }

    
export const getDashCentrosQueryOptions = <TData = Awaited<ReturnType<typeof dashCentros>>, TError = ErrorType<null>>(params: DashCentrosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentros>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDashCentrosQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dashCentros>>> = ({ signal }) => dashCentros(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dashCentros>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DashCentrosQueryResult = NonNullable<Awaited<ReturnType<typeof dashCentros>>>
export type DashCentrosQueryError = ErrorType<null>


export function useDashCentros<TData = Awaited<ReturnType<typeof dashCentros>>, TError = ErrorType<null>>(
 params: DashCentrosParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentros>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashCentros>>,
          TError,
          Awaited<ReturnType<typeof dashCentros>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashCentros<TData = Awaited<ReturnType<typeof dashCentros>>, TError = ErrorType<null>>(
 params: DashCentrosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentros>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashCentros>>,
          TError,
          Awaited<ReturnType<typeof dashCentros>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashCentros<TData = Awaited<ReturnType<typeof dashCentros>>, TError = ErrorType<null>>(
 params: DashCentrosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentros>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Dashboard de centros
 */

export function useDashCentros<TData = Awaited<ReturnType<typeof dashCentros>>, TError = ErrorType<null>>(
 params: DashCentrosParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentros>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDashCentrosQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Dashboard por centros
 */
export const dashCentroIndividual = (
    centerId: string,
    params: DashCentroIndividualParams,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<DashUmCentrosZodDto>(
      {url: `/dashboard/dash/${centerId}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getDashCentroIndividualQueryKey = (centerId?: string,
    params?: DashCentroIndividualParams,) => {
    return [`/dashboard/dash/${centerId}`, ...(params ? [params]: [])] as const;
    }

    
export const getDashCentroIndividualQueryOptions = <TData = Awaited<ReturnType<typeof dashCentroIndividual>>, TError = ErrorType<null>>(centerId: string,
    params: DashCentroIndividualParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentroIndividual>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDashCentroIndividualQueryKey(centerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof dashCentroIndividual>>> = ({ signal }) => dashCentroIndividual(centerId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(centerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof dashCentroIndividual>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type DashCentroIndividualQueryResult = NonNullable<Awaited<ReturnType<typeof dashCentroIndividual>>>
export type DashCentroIndividualQueryError = ErrorType<null>


export function useDashCentroIndividual<TData = Awaited<ReturnType<typeof dashCentroIndividual>>, TError = ErrorType<null>>(
 centerId: string,
    params: DashCentroIndividualParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentroIndividual>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashCentroIndividual>>,
          TError,
          Awaited<ReturnType<typeof dashCentroIndividual>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashCentroIndividual<TData = Awaited<ReturnType<typeof dashCentroIndividual>>, TError = ErrorType<null>>(
 centerId: string,
    params: DashCentroIndividualParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentroIndividual>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof dashCentroIndividual>>,
          TError,
          Awaited<ReturnType<typeof dashCentroIndividual>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useDashCentroIndividual<TData = Awaited<ReturnType<typeof dashCentroIndividual>>, TError = ErrorType<null>>(
 centerId: string,
    params: DashCentroIndividualParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentroIndividual>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Dashboard por centros
 */

export function useDashCentroIndividual<TData = Awaited<ReturnType<typeof dashCentroIndividual>>, TError = ErrorType<null>>(
 centerId: string,
    params: DashCentroIndividualParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof dashCentroIndividual>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getDashCentroIndividualQueryOptions(centerId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Buscar anomalias por centro
 */
export const anomaliasPorCentro = (
    centerId: string,
    params: AnomaliasPorCentroParams,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<AnomaliaPorCentroZodDto>(
      {url: `/dashboard/anomalias-produtividade/${centerId}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getAnomaliasPorCentroQueryKey = (centerId?: string,
    params?: AnomaliasPorCentroParams,) => {
    return [`/dashboard/anomalias-produtividade/${centerId}`, ...(params ? [params]: [])] as const;
    }

    
export const getAnomaliasPorCentroQueryOptions = <TData = Awaited<ReturnType<typeof anomaliasPorCentro>>, TError = ErrorType<null>>(centerId: string,
    params: AnomaliasPorCentroParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof anomaliasPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAnomaliasPorCentroQueryKey(centerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof anomaliasPorCentro>>> = ({ signal }) => anomaliasPorCentro(centerId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(centerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof anomaliasPorCentro>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AnomaliasPorCentroQueryResult = NonNullable<Awaited<ReturnType<typeof anomaliasPorCentro>>>
export type AnomaliasPorCentroQueryError = ErrorType<null>


export function useAnomaliasPorCentro<TData = Awaited<ReturnType<typeof anomaliasPorCentro>>, TError = ErrorType<null>>(
 centerId: string,
    params: AnomaliasPorCentroParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof anomaliasPorCentro>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof anomaliasPorCentro>>,
          TError,
          Awaited<ReturnType<typeof anomaliasPorCentro>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAnomaliasPorCentro<TData = Awaited<ReturnType<typeof anomaliasPorCentro>>, TError = ErrorType<null>>(
 centerId: string,
    params: AnomaliasPorCentroParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof anomaliasPorCentro>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof anomaliasPorCentro>>,
          TError,
          Awaited<ReturnType<typeof anomaliasPorCentro>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAnomaliasPorCentro<TData = Awaited<ReturnType<typeof anomaliasPorCentro>>, TError = ErrorType<null>>(
 centerId: string,
    params: AnomaliasPorCentroParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof anomaliasPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar anomalias por centro
 */

export function useAnomaliasPorCentro<TData = Awaited<ReturnType<typeof anomaliasPorCentro>>, TError = ErrorType<null>>(
 centerId: string,
    params: AnomaliasPorCentroParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof anomaliasPorCentro>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAnomaliasPorCentroQueryOptions(centerId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary OverViewPorDia
 */
export const overViewDia = (
    centerId: string,
    data: string,
    processo: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<DashBoardDiaPorCentrodtoZodDtoOutput>(
      {url: `/dashboard/overview-por-centro/${centerId}/${data}/${processo}`, method: 'GET', signal
    },
      options);
    }
  

export const getOverViewDiaQueryKey = (centerId?: string,
    data?: string,
    processo?: string,) => {
    return [`/dashboard/overview-por-centro/${centerId}/${data}/${processo}`] as const;
    }

    
export const getOverViewDiaQueryOptions = <TData = Awaited<ReturnType<typeof overViewDia>>, TError = ErrorType<null>>(centerId: string,
    data: string,
    processo: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof overViewDia>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOverViewDiaQueryKey(centerId,data,processo);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof overViewDia>>> = ({ signal }) => overViewDia(centerId,data,processo, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(centerId && data && processo), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof overViewDia>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OverViewDiaQueryResult = NonNullable<Awaited<ReturnType<typeof overViewDia>>>
export type OverViewDiaQueryError = ErrorType<null>


export function useOverViewDia<TData = Awaited<ReturnType<typeof overViewDia>>, TError = ErrorType<null>>(
 centerId: string,
    data: string,
    processo: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof overViewDia>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof overViewDia>>,
          TError,
          Awaited<ReturnType<typeof overViewDia>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOverViewDia<TData = Awaited<ReturnType<typeof overViewDia>>, TError = ErrorType<null>>(
 centerId: string,
    data: string,
    processo: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof overViewDia>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof overViewDia>>,
          TError,
          Awaited<ReturnType<typeof overViewDia>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOverViewDia<TData = Awaited<ReturnType<typeof overViewDia>>, TError = ErrorType<null>>(
 centerId: string,
    data: string,
    processo: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof overViewDia>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary OverViewPorDia
 */

export function useOverViewDia<TData = Awaited<ReturnType<typeof overViewDia>>, TError = ErrorType<null>>(
 centerId: string,
    data: string,
    processo: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof overViewDia>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOverViewDiaQueryOptions(centerId,data,processo,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



