/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Produtividade API
 * API de produtividade para gest√£o de produtividade dos funcion√°rios dentro do armaz√©m e gest√£o de carregamento
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AdicionarTransporteParams,
  ItensDoTransporteZodDtoOutput,
  Object,
  PaleteInputZodDto,
  TransportInfoZodDto,
  TransporteControllerBuscarTransportePorDataParams
} from '../../model';

import { axiosFetcher } from '../../../http/axios.http';
import type { ErrorType , BodyType } from '../../../http/axios.http';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Adiciona um transporte
 */
export const adicionarTransporte = (
    centerId: string,
    transportInfoZodDto: BodyType<TransportInfoZodDto>,
    params: AdicionarTransporteParams,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/transporte/adicionar-transporte/${centerId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: transportInfoZodDto,
        params, signal
    },
      options);
    }
  


export const getAdicionarTransporteMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adicionarTransporte>>, TError,{centerId: string;data: BodyType<TransportInfoZodDto>;params: AdicionarTransporteParams}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof adicionarTransporte>>, TError,{centerId: string;data: BodyType<TransportInfoZodDto>;params: AdicionarTransporteParams}, TContext> => {

const mutationKey = ['adicionarTransporte'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof adicionarTransporte>>, {centerId: string;data: BodyType<TransportInfoZodDto>;params: AdicionarTransporteParams}> = (props) => {
          const {centerId,data,params} = props ?? {};

          return  adicionarTransporte(centerId,data,params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AdicionarTransporteMutationResult = NonNullable<Awaited<ReturnType<typeof adicionarTransporte>>>
    export type AdicionarTransporteMutationBody = BodyType<TransportInfoZodDto>
    export type AdicionarTransporteMutationError = ErrorType<null>

    /**
 * @summary Adiciona um transporte
 */
export const useAdicionarTransporte = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adicionarTransporte>>, TError,{centerId: string;data: BodyType<TransportInfoZodDto>;params: AdicionarTransporteParams}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof adicionarTransporte>>,
        TError,
        {centerId: string;data: BodyType<TransportInfoZodDto>;params: AdicionarTransporteParams},
        TContext
      > => {

      const mutationOptions = getAdicionarTransporteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Obt√©m os transportes por ids
 */
export const getTransportesByIds = (
    getTransportesByIdsBody: BodyType<string[]>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/transporte/get-transportes-by-ids`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: getTransportesByIdsBody, signal
    },
      options);
    }
  


export const getGetTransportesByIdsMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getTransportesByIds>>, TError,{data: BodyType<string[]>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof getTransportesByIds>>, TError,{data: BodyType<string[]>}, TContext> => {

const mutationKey = ['getTransportesByIds'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof getTransportesByIds>>, {data: BodyType<string[]>}> = (props) => {
          const {data} = props ?? {};

          return  getTransportesByIds(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type GetTransportesByIdsMutationResult = NonNullable<Awaited<ReturnType<typeof getTransportesByIds>>>
    export type GetTransportesByIdsMutationBody = BodyType<string[]>
    export type GetTransportesByIdsMutationError = ErrorType<null>

    /**
 * @summary Obt√©m os transportes por ids
 */
export const useGetTransportesByIds = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof getTransportesByIds>>, TError,{data: BodyType<string[]>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof getTransportesByIds>>,
        TError,
        {data: BodyType<string[]>},
        TContext
      > => {

      const mutationOptions = getGetTransportesByIdsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Adiciona paletes de separa√ß√£o
 */
export const adicionarPaletesSeparacao = (
    paleteInputZodDto: BodyType<PaleteInputZodDto>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/transporte/adicionar-paletes`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: paleteInputZodDto, signal
    },
      options);
    }
  


export const getAdicionarPaletesSeparacaoMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adicionarPaletesSeparacao>>, TError,{data: BodyType<PaleteInputZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof adicionarPaletesSeparacao>>, TError,{data: BodyType<PaleteInputZodDto>}, TContext> => {

const mutationKey = ['adicionarPaletesSeparacao'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof adicionarPaletesSeparacao>>, {data: BodyType<PaleteInputZodDto>}> = (props) => {
          const {data} = props ?? {};

          return  adicionarPaletesSeparacao(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AdicionarPaletesSeparacaoMutationResult = NonNullable<Awaited<ReturnType<typeof adicionarPaletesSeparacao>>>
    export type AdicionarPaletesSeparacaoMutationBody = BodyType<PaleteInputZodDto>
    export type AdicionarPaletesSeparacaoMutationError = ErrorType<null>

    /**
 * @summary Adiciona paletes de separa√ß√£o
 */
export const useAdicionarPaletesSeparacao = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adicionarPaletesSeparacao>>, TError,{data: BodyType<PaleteInputZodDto>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof adicionarPaletesSeparacao>>,
        TError,
        {data: BodyType<PaleteInputZodDto>},
        TContext
      > => {

      const mutationOptions = getAdicionarPaletesSeparacaoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Lista os transportes n√£o cadastrados
 */
export const listarTransportesNaoCadastrados = (
    listarTransportesNaoCadastradosBody: BodyType<string[]>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/transporte/listar-nao-cadastrados`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: listarTransportesNaoCadastradosBody, signal
    },
      options);
    }
  


export const getListarTransportesNaoCadastradosMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof listarTransportesNaoCadastrados>>, TError,{data: BodyType<string[]>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof listarTransportesNaoCadastrados>>, TError,{data: BodyType<string[]>}, TContext> => {

const mutationKey = ['listarTransportesNaoCadastrados'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof listarTransportesNaoCadastrados>>, {data: BodyType<string[]>}> = (props) => {
          const {data} = props ?? {};

          return  listarTransportesNaoCadastrados(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ListarTransportesNaoCadastradosMutationResult = NonNullable<Awaited<ReturnType<typeof listarTransportesNaoCadastrados>>>
    export type ListarTransportesNaoCadastradosMutationBody = BodyType<string[]>
    export type ListarTransportesNaoCadastradosMutationError = ErrorType<null>

    /**
 * @summary Lista os transportes n√£o cadastrados
 */
export const useListarTransportesNaoCadastrados = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof listarTransportesNaoCadastrados>>, TError,{data: BodyType<string[]>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof listarTransportesNaoCadastrados>>,
        TError,
        {data: BodyType<string[]>},
        TContext
      > => {

      const mutationOptions = getListarTransportesNaoCadastradosMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Guarda as inte de separa√ß√£o
 */
export const transporteControllerGuardarIntesSeparacao = (
    transporteControllerGuardarIntesSeparacaoBody: BodyType<Object[]>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/transporte/guardar-intes-separacao`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: transporteControllerGuardarIntesSeparacaoBody, signal
    },
      options);
    }
  


export const getTransporteControllerGuardarIntesSeparacaoMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof transporteControllerGuardarIntesSeparacao>>, TError,{data: BodyType<Object[]>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof transporteControllerGuardarIntesSeparacao>>, TError,{data: BodyType<Object[]>}, TContext> => {

const mutationKey = ['transporteControllerGuardarIntesSeparacao'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof transporteControllerGuardarIntesSeparacao>>, {data: BodyType<Object[]>}> = (props) => {
          const {data} = props ?? {};

          return  transporteControllerGuardarIntesSeparacao(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TransporteControllerGuardarIntesSeparacaoMutationResult = NonNullable<Awaited<ReturnType<typeof transporteControllerGuardarIntesSeparacao>>>
    export type TransporteControllerGuardarIntesSeparacaoMutationBody = BodyType<Object[]>
    export type TransporteControllerGuardarIntesSeparacaoMutationError = ErrorType<null>

    /**
 * @summary Guarda as inte de separa√ß√£o
 */
export const useTransporteControllerGuardarIntesSeparacao = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof transporteControllerGuardarIntesSeparacao>>, TError,{data: BodyType<Object[]>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof transporteControllerGuardarIntesSeparacao>>,
        TError,
        {data: BodyType<Object[]>},
        TContext
      > => {

      const mutationOptions = getTransporteControllerGuardarIntesSeparacaoMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Busca os itens por transporte
 */
export const transporteControllerBuscarItensPorTransporte = (
    transporteId: string,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<ItensDoTransporteZodDtoOutput>(
      {url: `/api/transporte/buscar-itens-por-transporte/${transporteId}`, method: 'GET', signal
    },
      options);
    }
  

export const getTransporteControllerBuscarItensPorTransporteQueryKey = (transporteId?: string,) => {
    return [`/api/transporte/buscar-itens-por-transporte/${transporteId}`] as const;
    }

    
export const getTransporteControllerBuscarItensPorTransporteQueryOptions = <TData = Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>, TError = ErrorType<null>>(transporteId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransporteControllerBuscarItensPorTransporteQueryKey(transporteId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>> = ({ signal }) => transporteControllerBuscarItensPorTransporte(transporteId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(transporteId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TransporteControllerBuscarItensPorTransporteQueryResult = NonNullable<Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>>
export type TransporteControllerBuscarItensPorTransporteQueryError = ErrorType<null>


export function useTransporteControllerBuscarItensPorTransporte<TData = Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>, TError = ErrorType<null>>(
 transporteId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>,
          TError,
          Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTransporteControllerBuscarItensPorTransporte<TData = Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>, TError = ErrorType<null>>(
 transporteId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>,
          TError,
          Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTransporteControllerBuscarItensPorTransporte<TData = Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>, TError = ErrorType<null>>(
 transporteId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Busca os itens por transporte
 */

export function useTransporteControllerBuscarItensPorTransporte<TData = Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>, TError = ErrorType<null>>(
 transporteId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof transporteControllerBuscarItensPorTransporte>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTransporteControllerBuscarItensPorTransporteQueryOptions(transporteId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Busca os transportes por data
 */
export const transporteControllerBuscarTransportePorData = (
    centerId: string,
    params: TransporteControllerBuscarTransportePorDataParams,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<null>(
      {url: `/api/transporte/buscar-transporte-por-data/${centerId}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getTransporteControllerBuscarTransportePorDataQueryKey = (centerId?: string,
    params?: TransporteControllerBuscarTransportePorDataParams,) => {
    return [`/api/transporte/buscar-transporte-por-data/${centerId}`, ...(params ? [params]: [])] as const;
    }

    
export const getTransporteControllerBuscarTransportePorDataQueryOptions = <TData = Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>, TError = ErrorType<null>>(centerId: string,
    params: TransporteControllerBuscarTransportePorDataParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransporteControllerBuscarTransportePorDataQueryKey(centerId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>> = ({ signal }) => transporteControllerBuscarTransportePorData(centerId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(centerId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TransporteControllerBuscarTransportePorDataQueryResult = NonNullable<Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>>
export type TransporteControllerBuscarTransportePorDataQueryError = ErrorType<null>


export function useTransporteControllerBuscarTransportePorData<TData = Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>, TError = ErrorType<null>>(
 centerId: string,
    params: TransporteControllerBuscarTransportePorDataParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>,
          TError,
          Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTransporteControllerBuscarTransportePorData<TData = Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>, TError = ErrorType<null>>(
 centerId: string,
    params: TransporteControllerBuscarTransportePorDataParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>,
          TError,
          Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>
        > , 'initialData'
      >, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTransporteControllerBuscarTransportePorData<TData = Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>, TError = ErrorType<null>>(
 centerId: string,
    params: TransporteControllerBuscarTransportePorDataParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Busca os transportes por data
 */

export function useTransporteControllerBuscarTransportePorData<TData = Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>, TError = ErrorType<null>>(
 centerId: string,
    params: TransporteControllerBuscarTransportePorDataParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof transporteControllerBuscarTransportePorData>>, TError, TData>>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getTransporteControllerBuscarTransportePorDataQueryOptions(centerId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Lista os transportes com demanda iniciada
 */
export const listarTransportesComDemandaIniciada = (
    listarTransportesComDemandaIniciadaBody: BodyType<string[]>,
 options?: SecondParameter<typeof axiosFetcher>,signal?: AbortSignal
) => {
      
      
      return axiosFetcher<string[]>(
      {url: `/api/transporte/listar-transportes-com-demanda-iniciada`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: listarTransportesComDemandaIniciadaBody, signal
    },
      options);
    }
  


export const getListarTransportesComDemandaIniciadaMutationOptions = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof listarTransportesComDemandaIniciada>>, TError,{data: BodyType<string[]>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
): UseMutationOptions<Awaited<ReturnType<typeof listarTransportesComDemandaIniciada>>, TError,{data: BodyType<string[]>}, TContext> => {

const mutationKey = ['listarTransportesComDemandaIniciada'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof listarTransportesComDemandaIniciada>>, {data: BodyType<string[]>}> = (props) => {
          const {data} = props ?? {};

          return  listarTransportesComDemandaIniciada(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ListarTransportesComDemandaIniciadaMutationResult = NonNullable<Awaited<ReturnType<typeof listarTransportesComDemandaIniciada>>>
    export type ListarTransportesComDemandaIniciadaMutationBody = BodyType<string[]>
    export type ListarTransportesComDemandaIniciadaMutationError = ErrorType<null>

    /**
 * @summary Lista os transportes com demanda iniciada
 */
export const useListarTransportesComDemandaIniciada = <TError = ErrorType<null>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof listarTransportesComDemandaIniciada>>, TError,{data: BodyType<string[]>}, TContext>, request?: SecondParameter<typeof axiosFetcher>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof listarTransportesComDemandaIniciada>>,
        TError,
        {data: BodyType<string[]>},
        TContext
      > => {

      const mutationOptions = getListarTransportesComDemandaIniciadaMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    